// Prisma schema for PostgreSQL production database
// npx prisma migrate dev --name init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Submission {
  id         String   @id @default(cuid())
  name       String?
  contact    String?  // Now stores phone number
  email      String?
  message    String
  ipHash     String
  locale     String
  status     String   @default("PENDING") // PENDING | REVIEWED | FLAGGED
  // File attachment fields
  attachmentUrl    String?  // URL to the stored file
  attachmentKey    String?  // S3 key or file path for deletion
  attachmentName   String?  // Original filename
  attachmentSize   Int?     // File size in bytes
  attachmentType   String?  // MIME type
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  source     String   @default("web")
  auditLogs  AuditLog[]

  @@index([ipHash])
  @@index([createdAt])
}

model AuditLog {
  id           String   @id @default(cuid())
  submission   Submission? @relation(fields: [submissionId], references: [id])
  submissionId String?
  action       String
  actor        String?
  payload      String? // JSON stringified
  createdAt    DateTime @default(now())
}

// User management system
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  passwordHash  String
  role          UserRole  @default(SUPPORT)
  isActive      Boolean   @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  createdBy     String?
  updatedBy     String?
  
  // Relations
  sessions      Session[]
  auditLogs     UserAuditLog[]
  passwordResetTokens PasswordResetToken[]
  
  @@index([email])
  @@index([role])
  @@index([isActive])
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  userAgent String?
  ipAddress String?
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@index([expiresAt])
  @@index([userId])
}

model UserAuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  details   String?  // JSON stringified
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([createdAt])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@index([expiresAt])
  @@index([userId])
}

model Slider {
  id          String   @id @default(cuid())
  titleEn     String
  titleBn     String
  descriptionEn String
  descriptionBn String
  image       String
  imageKey    String?  // S3 key for image cleanup
  link        String
  buttonTextEn String
  buttonTextBn String
  categoryEn  String
  categoryBn  String
  date        DateTime @default(now())
  featured    Boolean  @default(false)
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  updatedBy   String?
  
  @@index([featured])
  @@index([isActive])
  @@index([order])
  @@index([createdAt])
}

model BlogPost {
  id          String   @id @default(cuid())
  slug        String   @unique
  titleEn     String
  titleBn     String
  excerptEn   String
  excerptBn   String
  contentEn   String
  contentBn   String
  authorEn    String
  authorBn    String
  category    String
  image       String
  tags        String[] // Array of tags
  featured    Boolean  @default(false)
  isActive    Boolean  @default(true)
  readTime    Int      @default(5) // in minutes
  publishedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  updatedBy   String?
  
  @@index([category])
  @@index([featured])
  @@index([isActive])
  @@index([publishedAt])
  @@index([slug])
}

model FAQ {
  id          String   @id @default(cuid())
  questionEn  String
  questionBn  String
  answerEn    String
  answerBn    String
  category    String
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  updatedBy   String?
  
  @@index([category])
  @@index([isActive])
  @@index([order])
}

model Notice {
  id          String   @id @default(cuid())
  titleEn     String
  titleBn     String
  contentEn   String
  contentBn   String
  type        NoticeType @default(INFORMATION)
  priority    Priority @default(MEDIUM)
  category    String
  publishedAt DateTime @default(now())
  expiresAt   DateTime?
  isActive    Boolean  @default(true)
  isPinned    Boolean  @default(false)
  attachments String[] // Array of file URLs
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  updatedBy   String?
  
  @@index([type])
  @@index([priority])
  @@index([category])
  @@index([isActive])
  @@index([isPinned])
  @@index([publishedAt])
}

model ContactInfo {
  id          String   @id @default(cuid())
  type        ContactType @default(OFFICE)
  nameEn      String
  nameBn      String
  descriptionEn String?
  descriptionBn String?
  addressEn   String?
  addressBn   String?
  phone       String?
  email       String?
  website     String?
  hoursEn     String?
  hoursBn     String?
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  updatedBy   String?
  
  @@index([type])
  @@index([isActive])
  @@index([order])
}

enum UserRole {
  ADMIN
  MANAGEMENT
  SUPPORT
}

enum NoticeType {
  ANNOUNCEMENT
  WARNING
  INFORMATION
  URGENT
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ContactType {
  OFFICE
  DEPARTMENT
  PERSON
  HOTLINE
}

model CommissionMember {
  id            String   @id @default(cuid())
  nameEn        String
  nameBn        String
  designationEn String
  designationBn String
  descriptionEn String
  descriptionBn String
  email         String?
  phone         String?
  image         String?
  serialNo      Int      @unique
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String?
  updatedBy     String?
  
  @@index([serialNo])
  @@index([isActive])
}

model CommissionOfficial {
  id            String   @id @default(cuid())
  nameEn        String
  nameBn        String
  positionEn    String
  positionBn    String
  departmentEn  String
  departmentBn  String
  descriptionEn String?
  descriptionBn String?
  email         String?
  phone         String?
  experienceEn  String?
  experienceBn  String?
  qualificationEn String?
  qualificationBn String?
  image         String?
  category      OfficialCategory @default(SECRETARIAT)
  isActive      Boolean  @default(true)
  order         Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String?
  updatedBy     String?
  
  @@index([category])
  @@index([isActive])
  @@index([order])
}

model CommissionTerm {
  id            String   @id @default(cuid())
  titleEn       String
  titleBn       String
  descriptionEn String
  descriptionBn String
  category      String
  section       String
  order         Int      @default(0)
  effectiveFrom DateTime
  effectiveTo   DateTime?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String?
  updatedBy     String?
  
  @@index([category])
  @@index([section])
  @@index([order])
  @@index([isActive])
  @@index([effectiveFrom])
}

model Gazette {
  id            String   @id @default(cuid())
  titleEn       String
  titleBn       String
  gazetteNumber String   @unique
  category      String
  priority      Priority @default(MEDIUM)
  publishedAt   DateTime
  downloadUrl   String
  description   String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String?
  updatedBy     String?
  
  @@index([gazetteNumber])
  @@index([category])
  @@index([priority])
  @@index([publishedAt])
  @@index([isActive])
}

// Gallery system for images and media
model Gallery {
  id            String   @id @default(cuid())
  titleEn       String
  titleBn       String
  descriptionEn String?
  descriptionBn String?
  imageUrl      String   // S3 URL
  imageKey      String   // S3 key for deletion
  category      String   @default("general")
  tags          String[] @default([])
  featured      Boolean  @default(false)
  isActive      Boolean  @default(true)
  order         Int      @default(0)
  publishedAt   DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String?
  updatedBy     String?
  
  @@index([category])
  @@index([featured])
  @@index([isActive])
  @@index([publishedAt])
  @@index([order])
}

enum OfficialCategory {
  SECRETARIAT
  TECHNICAL
  ADMINISTRATIVE
  SUPPORT
}
