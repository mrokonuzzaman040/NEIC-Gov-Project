services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://election:change_me@db:5432/election
      NEXTAUTH_URL: http://localhost:3000
      NEXTAUTH_SECRET: your-nextauth-secret-key-here
      HASH_SALT: your-hash-salt-here
      LOG_LEVEL: info
      UPLOAD_DIR: /app/uploads/submissions
      NEXT_PUBLIC_MAX_UPLOAD_FILE_SIZE_MB: 25
      NEXT_PUBLIC_RECAPTCHA_KEY: 6LdjsNArAAAAAEWKWxEGhg_Dbq9T_JmdOvPtA8_j
      RECAPTCHA_SECRET_KEY: 6LdjsNArAAAAAAM7WiOdCW0PIlLw3gkkEgxzemxQ
      NEXT_PUBLIC_GOOGLE_MAPS_API_KEY: AIzaSyB2Ao953YsjaZPlN_H1QR9yd0W60UP7uLE
      NEXT_PUBLIC_APP_NAME: Election Commission
      SENDGRID_API_KEY: 
      FROM_EMAIL: 
      REDIS_URL: redis://redis:6379
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_USERNAME: 
      REDIS_PASSWORD: change_me_redis
      REDIS_TLS: false
      RATE_LIMIT_MAX: 20
      RATE_LIMIT_WINDOW_SECONDS: 60
      SEED_DATABASE: false
      ADMIN_EMAIL: admin@election.gov
      ADMIN_PASSWORD: admin123
      ADMIN_NAME: Admin User
      MANAGER_EMAIL: manager@election.gov
      MANAGER_PASSWORD: manager123
      MANAGER_NAME: Manager User
      SUPPORT_EMAIL: support@election.gov
      SUPPORT_PASSWORD: support123
      SUPPORT_NAME: Support User
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - uploads_data:/app/uploads
    restart: unless-stopped

  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: election
      POSTGRES_USER: election
      POSTGRES_PASSWORD: change_me
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U election -d election"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    command: [
      "redis-server",
      "--appendonly", "yes",
      "--requirepass", "change_me_redis"
    ]
    environment:
      REDIS_PASSWORD: change_me_redis
    volumes:
      - redis_data:/data
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: mrokondev@gmail.com
      PGADMIN_DEFAULT_PASSWORD: Rupom2025@#
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "5050:80"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    restart: unless-stopped

  db_backup:
    image: prodrigestivill/postgres-backup-local:16
    environment:
      POSTGRES_HOST: db
      POSTGRES_DB: election
      POSTGRES_USER: election
      POSTGRES_PASSWORD: change_me
      POSTGRES_EXTRA_OPTS: --schema=public --blobs
      SCHEDULE: "@daily"
      BACKUP_ON_START: TRUE
      BACKUP_KEEP_DAYS: 7
      BACKUP_KEEP_WEEKS: 4
      BACKUP_KEEP_MONTHS: 6
      TZ: UTC
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - postgres_backups:/backups
    restart: unless-stopped

  uploads_backup:
    image: alpine:3.20
    entrypoint: ["/bin/sh", "/opt/backup/uploads-backup.sh"]
    environment:
      UPLOADS_BACKUP_INTERVAL_SECONDS: 86400
      UPLOADS_BACKUP_RETENTION_DAYS: 7
      TZ: UTC
    depends_on:
      app:
        condition: service_started
    volumes:
      - uploads_data:/uploads:ro
      - uploads_backups:/backups
      - ./docker/uploads-backup.sh:/opt/backup/uploads-backup.sh:ro
    restart: unless-stopped

volumes:
  postgres_data:
  postgres_backups:
  uploads_data:
  uploads_backups:
  redis_data:
  pgadmin_data:
