const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient();

async function seedBlogData() {
  try {
    console.log('üìù Seeding blog data...');
    
    const blogDataPath = path.join(__dirname, '../data/blogData.json');
    const blogData = JSON.parse(fs.readFileSync(blogDataPath, 'utf8'));
    
    const posts = blogData.blogPage.posts;
    
    for (const post of posts) {
      await prisma.blogPost.upsert({
        where: { slug: post.slug },
        update: {
          titleEn: post.title.en,
          titleBn: post.title.bn,
          excerptEn: post.excerpt.en,
          excerptBn: post.excerpt.bn,
          contentEn: post.content.en,
          contentBn: post.content.bn,
          authorEn: post.author.en,
          authorBn: post.author.bn,
          category: post.category,
          image: post.image,
          tags: post.tags,
          featured: post.featured,
          readTime: parseInt(post.readTime.en.split(' ')[0]) || 5,
          publishedAt: new Date(post.date),
        },
        create: {
          slug: post.slug,
          titleEn: post.title.en,
          titleBn: post.title.bn,
          excerptEn: post.excerpt.en,
          excerptBn: post.excerpt.bn,
          contentEn: post.content.en,
          contentBn: post.content.bn,
          authorEn: post.author.en,
          authorBn: post.author.bn,
          category: post.category,
          image: post.image,
          tags: post.tags,
          featured: post.featured,
          readTime: parseInt(post.readTime.en.split(' ')[0]) || 5,
          publishedAt: new Date(post.date),
          createdBy: 'system-seed',
        },
      });
    }
    
    console.log(`‚úÖ Seeded ${posts.length} blog posts`);
  } catch (error) {
    console.error('‚ùå Error seeding blog data:', error);
  }
}

async function seedFAQData() {
  try {
    console.log('‚ùì Seeding FAQ data...');
    
    // Create sample FAQs based on the structure
    const sampleFAQs = [
      {
        id: 'faq-1',
        questionEn: 'How can I submit a complaint about electoral irregularities?',
        questionBn: '‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶®‡ßÄ ‡¶Ö‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá ‡¶Ü‡¶Æ‡¶ø ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ö‡¶≠‡¶ø‡¶Ø‡ßã‡¶ó ‡¶¶‡¶æ‡¶ñ‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø?',
        answerEn: 'You can submit complaints through our online portal, by email, or by visiting our office. All complaints are reviewed by our investigation team.',
        answerBn: '‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶Ö‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶™‡ßã‡¶∞‡ßç‡¶ü‡¶æ‡¶≤, ‡¶á‡¶Æ‡ßá‡¶á‡¶≤‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶¨‡¶æ ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶Ö‡¶´‡¶ø‡¶∏‡ßá ‡¶ó‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ö‡¶≠‡¶ø‡¶Ø‡ßã‡¶ó ‡¶¶‡¶æ‡¶ñ‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶Ö‡¶≠‡¶ø‡¶Ø‡ßã‡¶ó ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶§‡¶¶‡¶®‡ßç‡¶§ ‡¶¶‡¶≤ ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶≤‡ßã‡¶ö‡¶®‡¶æ ‡¶ï‡¶∞‡ßá‡•§',
        category: 'complaints',
        order: 1
      },
      {
        id: 'faq-2',
        questionEn: 'What is the process for investigating electoral complaints?',
        questionBn: '‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶®‡ßÄ ‡¶Ö‡¶≠‡¶ø‡¶Ø‡ßã‡¶ó ‡¶§‡¶¶‡¶®‡ßç‡¶§‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶ï‡ßÄ?',
        answerEn: 'Our investigation process includes initial review, evidence collection, witness interviews, and final report preparation. The entire process typically takes 30-60 days.',
        answerBn: '‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶§‡¶¶‡¶®‡ßç‡¶§ ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶Ø‡¶º ‡¶™‡ßç‡¶∞‡¶æ‡¶•‡¶Æ‡¶ø‡¶ï ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶≤‡ßã‡¶ö‡¶®‡¶æ, ‡¶™‡ßç‡¶∞‡¶Æ‡¶æ‡¶£ ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π, ‡¶∏‡¶æ‡¶ï‡ßç‡¶∑‡ßÄ ‡¶∏‡¶æ‡¶ï‡ßç‡¶∑‡¶æ‡ßé‡¶ï‡¶æ‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶ö‡ßÇ‡¶°‡¶º‡¶æ‡¶®‡ßç‡¶§ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¨‡ßá‡¶¶‡¶® ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶Ö‡¶®‡ßç‡¶§‡¶∞‡ßç‡¶≠‡ßÅ‡¶ï‡ßç‡¶§‡•§ ‡¶™‡ßÅ‡¶∞‡ßã ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶ü‡¶ø ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ ‡ß©‡ß¶-‡ß¨‡ß¶ ‡¶¶‡¶ø‡¶® ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶®‡ßá‡¶Ø‡¶º‡•§',
        category: 'process',
        order: 2
      },
      {
        id: 'faq-3',
        questionEn: 'How can I track the status of my complaint?',
        questionBn: '‡¶Ü‡¶Æ‡¶ø ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶Ö‡¶≠‡¶ø‡¶Ø‡ßã‡¶ó‡ßá‡¶∞ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø?',
        answerEn: 'You can track your complaint status by logging into your account on our portal or by contacting our support team with your complaint reference number.',
        answerBn: '‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶™‡ßã‡¶∞‡ßç‡¶ü‡¶æ‡¶≤‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá ‡¶≤‡¶ó ‡¶á‡¶® ‡¶ï‡¶∞‡ßá ‡¶¨‡¶æ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶≠‡¶ø‡¶Ø‡ßã‡¶ó‡ßá‡¶∞ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶∏ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ ‡¶¶‡¶≤‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶≠‡¶ø‡¶Ø‡ßã‡¶ó‡ßá‡¶∞ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§',
        category: 'support',
        order: 3
      },
      {
        id: 'faq-4',
        questionEn: 'What types of electoral issues can I report?',
        questionBn: '‡¶Ü‡¶Æ‡¶ø ‡¶ï‡ßÄ ‡¶ß‡¶∞‡¶®‡ßá‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶®‡ßÄ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø?',
        answerEn: 'You can report various issues including voter intimidation, ballot box tampering, campaign violations, polling station problems, and other electoral irregularities.',
        answerBn: '‡¶Ü‡¶™‡¶®‡¶ø ‡¶≠‡ßã‡¶ü‡¶æ‡¶∞ ‡¶≠‡ßÄ‡¶§‡¶ø ‡¶™‡ßç‡¶∞‡¶¶‡¶∞‡ßç‡¶∂‡¶®, ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡¶ü ‡¶¨‡¶ï‡ßç‡¶∏‡ßá ‡¶ï‡¶æ‡¶∞‡¶ö‡ßÅ‡¶™‡¶ø, ‡¶™‡ßç‡¶∞‡¶ö‡¶æ‡¶∞‡¶£‡¶æ ‡¶≤‡¶ô‡ßç‡¶ò‡¶®, ‡¶≠‡ßã‡¶ü‡¶ï‡ßá‡¶®‡ßç‡¶¶‡ßç‡¶∞‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶®‡ßÄ ‡¶Ö‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ ‡¶∏‡¶π ‡¶¨‡¶ø‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§',
        category: 'reporting',
        order: 4
      },
      {
        id: 'faq-5',
        questionEn: 'What is the commission\'s mandate?',
        questionBn: '‡¶ï‡¶Æ‡¶ø‡¶∂‡¶®‡ßá‡¶∞ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶ü ‡¶ï‡ßÄ?',
        answerEn: 'The commission is mandated to investigate the conduct of national elections held in 2014, 2018, and 2024, and examine allegations of irregularities.',
        answerBn: '‡¶ï‡¶Æ‡¶ø‡¶∂‡¶®‡ßá‡¶∞ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶ü ‡¶π‡¶≤ ‡ß®‡ß¶‡ßß‡ß™, ‡ß®‡ß¶‡ßß‡ßÆ ‡¶è‡¶¨‡¶Ç ‡ß®‡ß¶‡ß®‡ß™ ‡¶∏‡¶æ‡¶≤‡ßá ‡¶Ö‡¶®‡ßÅ‡¶∑‡ßç‡¶†‡¶ø‡¶§ ‡¶ú‡¶æ‡¶§‡ßÄ‡¶Ø‡¶º ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶®‡ßá‡¶∞ ‡¶Ü‡¶ö‡¶∞‡¶£ ‡¶§‡¶¶‡¶®‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶Ö‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡ßá‡¶∞ ‡¶Ö‡¶≠‡¶ø‡¶Ø‡ßã‡¶ó ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶æ‡•§',
        category: 'general',
        order: 5
      }
    ];

    for (const faq of sampleFAQs) {
      await prisma.fAQ.upsert({
        where: { id: faq.id },
        update: {
          questionEn: faq.questionEn,
          questionBn: faq.questionBn,
          answerEn: faq.answerEn,
          answerBn: faq.answerBn,
          category: faq.category,
          order: faq.order,
        },
        create: {
          id: faq.id,
          questionEn: faq.questionEn,
          questionBn: faq.questionBn,
          answerEn: faq.answerEn,
          answerBn: faq.answerBn,
          category: faq.category,
          order: faq.order,
          createdBy: 'system-seed',
        },
      });
    }
    
    console.log(`‚úÖ Seeded ${sampleFAQs.length} FAQs`);
  } catch (error) {
    console.error('‚ùå Error seeding FAQ data:', error);
  }
}

async function seedNoticeData() {
  try {
    console.log('üì¢ Seeding notice data...');
    
    const noticeDataPath = path.join(__dirname, '../data/notices.json');
    const noticeData = JSON.parse(fs.readFileSync(noticeDataPath, 'utf8'));
    
    const notices = noticeData.notices;
    
    for (const notice of notices) {
      const priorityMap = {
        'low': 'LOW',
        'medium': 'MEDIUM', 
        'high': 'HIGH',
        'critical': 'CRITICAL'
      };

      await prisma.notice.upsert({
        where: { id: `notice-${notice.id}` },
        update: {
          titleEn: notice.title.en,
          titleBn: notice.title.bn,
          contentEn: `Detailed content for ${notice.title.en}. This notice provides important information regarding ${notice.category} matters. Please review the attached document for complete details.`,
          contentBn: `${notice.title.bn} ‡¶è‡¶∞ ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡¶¨‡¶∏‡ßç‡¶§‡ßÅ‡•§ ‡¶è‡¶á ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶™‡ßç‡¶§‡¶ø ${notice.category} ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡ßá ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßá‡•§ ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶Ç‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶®‡¶•‡¶ø ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶≤‡ßã‡¶ö‡¶®‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§`,
          type: notice.priority === 'high' ? 'URGENT' : 'INFORMATION',
          priority: priorityMap[notice.priority] || 'MEDIUM',
          category: notice.category,
          publishedAt: new Date(notice.publishedAt),
          isPinned: notice.priority === 'high',
          attachments: notice.downloadUrl ? [notice.downloadUrl] : [],
        },
        create: {
          id: `notice-${notice.id}`,
          titleEn: notice.title.en,
          titleBn: notice.title.bn,
          contentEn: `Detailed content for ${notice.title.en}. This notice provides important information regarding ${notice.category} matters. Please review the attached document for complete details.`,
          contentBn: `${notice.title.bn} ‡¶è‡¶∞ ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡¶¨‡¶∏‡ßç‡¶§‡ßÅ‡•§ ‡¶è‡¶á ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶™‡ßç‡¶§‡¶ø ${notice.category} ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡ßá ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßá‡•§ ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶Ç‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶®‡¶•‡¶ø ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶≤‡ßã‡¶ö‡¶®‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§`,
          type: notice.priority === 'high' ? 'URGENT' : 'INFORMATION',
          priority: priorityMap[notice.priority] || 'MEDIUM',
          category: notice.category,
          publishedAt: new Date(notice.publishedAt),
          isPinned: notice.priority === 'high',
          attachments: notice.downloadUrl ? [notice.downloadUrl] : [],
          createdBy: 'system-seed',
        },
      });
    }
    
    console.log(`‚úÖ Seeded ${notices.length} notices`);
  } catch (error) {
    console.error('‚ùå Error seeding notice data:', error);
  }
}

async function seedContactData() {
  try {
    console.log('üìû Seeding contact data...');
    
    const contactDataPath = path.join(__dirname, '../data/contact_info.json');
    const contactData = JSON.parse(fs.readFileSync(contactDataPath, 'utf8'));
    
    const contactInfo = contactData.contactInfo;
    
    await prisma.contactInfo.upsert({
      where: { id: 'main-office' },
      update: {
        type: 'OFFICE',
        nameEn: contactInfo.address.en.organization,
        nameBn: contactInfo.address.bn.organization,
        descriptionEn: 'Main administrative office of the Election Commission',
        descriptionBn: '‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶Æ‡¶ø‡¶∂‡¶®‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶™‡ßç‡¶∞‡¶∂‡¶æ‡¶∏‡¶®‡¶ø‡¶ï ‡¶Ö‡¶´‡¶ø‡¶∏',
        addressEn: `${contactInfo.address.en.location}, ${contactInfo.address.en.area}, ${contactInfo.address.en.city}`,
        addressBn: `${contactInfo.address.bn.location}, ${contactInfo.address.bn.area}, ${contactInfo.address.bn.city}`,
        email: contactInfo.email,
        order: 1,
      },
      create: {
        id: 'main-office',
        type: 'OFFICE',
        nameEn: contactInfo.address.en.organization,
        nameBn: contactInfo.address.bn.organization,
        descriptionEn: 'Main administrative office of the Election Commission',
        descriptionBn: '‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶Æ‡¶ø‡¶∂‡¶®‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶™‡ßç‡¶∞‡¶∂‡¶æ‡¶∏‡¶®‡¶ø‡¶ï ‡¶Ö‡¶´‡¶ø‡¶∏',
        addressEn: `${contactInfo.address.en.location}, ${contactInfo.address.en.area}, ${contactInfo.address.en.city}`,
        addressBn: `${contactInfo.address.bn.location}, ${contactInfo.address.bn.area}, ${contactInfo.address.bn.city}`,
        email: contactInfo.email,
        order: 1,
        createdBy: 'system-seed',
      },
    });
    
    console.log('‚úÖ Seeded contact information');
  } catch (error) {
    console.error('‚ùå Error seeding contact data:', error);
  }
}

async function seedCommissionMembers() {
  try {
    console.log('üë• Seeding commission members...');
    
    const commissionDataPath = path.join(__dirname, '../data/commisson_data.json');
    const commissionData = JSON.parse(fs.readFileSync(commissionDataPath, 'utf8'));
    
    const members = commissionData.personnel.filter(person => person.role_type === 'commission_member');
    
    for (const member of members) {
      await prisma.commissionMember.upsert({
        where: { serialNo: member.serial_no },
        update: {
          nameEn: member.name_english,
          nameBn: member.name_bengali,
          designationEn: member.designation_english,
          designationBn: member.designation_bengali,
          descriptionEn: member.description_english,
          descriptionBn: member.description_bengali,
          email: member.email,
          phone: member.phone,
          image: member.image,
        },
        create: {
          nameEn: member.name_english,
          nameBn: member.name_bengali,
          designationEn: member.designation_english,
          designationBn: member.designation_bengali,
          descriptionEn: member.description_english,
          descriptionBn: member.description_bengali,
          email: member.email,
          phone: member.phone,
          image: member.image,
          serialNo: member.serial_no,
          createdBy: 'system-seed',
        },
      });
    }
    
    console.log(`‚úÖ Seeded ${members.length} commission members`);
  } catch (error) {
    console.error('‚ùå Error seeding commission members:', error);
  }
}

async function seedCommissionOfficials() {
  try {
    console.log('üëî Seeding commission officials...');
    
    const officialsDataPath = path.join(__dirname, '../data/commisson/commission_officials.json');
    const officialsData = JSON.parse(fs.readFileSync(officialsDataPath, 'utf8'));
    
    // Seed secretariat staff
    const secretariatMembers = officialsData.officials.secretariat.members;
    
    for (let i = 0; i < secretariatMembers.length; i++) {
      const official = secretariatMembers[i];
      await prisma.commissionOfficial.upsert({
        where: { id: `official-secretariat-${i + 1}` },
        update: {
          nameEn: official.name.en,
          nameBn: official.name.bn,
          positionEn: official.position.en,
          positionBn: official.position.bn,
          departmentEn: official.department.en,
          departmentBn: official.department.bn,
          email: official.email,
          phone: official.phone,
          experienceEn: official.experience.en,
          experienceBn: official.experience.bn,
          qualificationEn: official.qualification.en,
          qualificationBn: official.qualification.bn,
          category: 'SECRETARIAT',
          order: i + 1,
        },
        create: {
          id: `official-secretariat-${i + 1}`,
          nameEn: official.name.en,
          nameBn: official.name.bn,
          positionEn: official.position.en,
          positionBn: official.position.bn,
          departmentEn: official.department.en,
          departmentBn: official.department.bn,
          email: official.email,
          phone: official.phone,
          experienceEn: official.experience.en,
          experienceBn: official.experience.bn,
          qualificationEn: official.qualification.en,
          qualificationBn: official.qualification.bn,
          category: 'SECRETARIAT',
          order: i + 1,
          createdBy: 'system-seed',
        },
      });
    }
    
    console.log(`‚úÖ Seeded ${secretariatMembers.length} commission officials`);
  } catch (error) {
    console.error('‚ùå Error seeding commission officials:', error);
  }
}

async function seedGazettes() {
  try {
    console.log('üì∞ Seeding gazettes...');
    
    const gazettesDataPath = path.join(__dirname, '../data/gazettes.json');
    const gazettesData = JSON.parse(fs.readFileSync(gazettesDataPath, 'utf8'));
    
    const gazettes = gazettesData.gazettes; // Correct property name
    
    for (const gazette of gazettes) {
      const priorityMap = {
        'low': 'LOW',
        'medium': 'MEDIUM', 
        'high': 'HIGH',
        'critical': 'CRITICAL'
      };

      await prisma.gazette.upsert({
        where: { gazetteNumber: gazette.gazetteNumber || `GAZ-${gazette.id}` },
        update: {
          titleEn: gazette.title.en,
          titleBn: gazette.title.bn,
          category: gazette.category,
          priority: priorityMap[gazette.priority] || 'MEDIUM',
          publishedAt: new Date(gazette.publishedAt),
          downloadUrl: gazette.downloadUrl,
          description: `Official gazette notification: ${gazette.title.en}`,
        },
        create: {
          titleEn: gazette.title.en,
          titleBn: gazette.title.bn,
          gazetteNumber: gazette.gazetteNumber || `GAZ-${gazette.id}`,
          category: gazette.category,
          priority: priorityMap[gazette.priority] || 'MEDIUM',
          publishedAt: new Date(gazette.publishedAt),
          downloadUrl: gazette.downloadUrl,
          description: `Official gazette notification: ${gazette.title.en}`,
          createdBy: 'system-seed',
        },
      });
    }
    
    console.log(`‚úÖ Seeded ${gazettes.length} gazettes`);
  } catch (error) {
    console.error('‚ùå Error seeding gazettes:', error);
  }
}

async function seedCommissionTerms() {
  try {
    console.log('üìã Seeding commission terms...');
    
    // Create sample terms of reference
    const sampleTerms = [
      {
        id: 'term-1',
        titleEn: 'Commission Mandate and Objectives',
        titleBn: '‡¶ï‡¶Æ‡¶ø‡¶∂‡¶®‡ßá‡¶∞ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶ü ‡¶ì ‡¶â‡¶¶‡ßç‡¶¶‡ßá‡¶∂‡ßç‡¶Ø',
        descriptionEn: 'To investigate and inquire into the conduct of the National Parliamentary Elections held in 2014, 2018, and 2024, and to examine allegations of irregularities.',
        descriptionBn: '‡ß®‡ß¶‡ßß‡ß™, ‡ß®‡ß¶‡ßß‡ßÆ ‡¶è‡¶¨‡¶Ç ‡ß®‡ß¶‡ß®‡ß™ ‡¶∏‡¶æ‡¶≤‡ßá ‡¶Ö‡¶®‡ßÅ‡¶∑‡ßç‡¶†‡¶ø‡¶§ ‡¶ú‡¶æ‡¶§‡ßÄ‡¶Ø‡¶º  ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶®‡ßá‡¶∞ ‡¶Ü‡¶ö‡¶∞‡¶£ ‡¶§‡¶¶‡¶®‡ßç‡¶§ ‡¶ì ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶Ö‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡ßá‡¶∞ ‡¶Ö‡¶≠‡¶ø‡¶Ø‡ßã‡¶ó ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶æ‡•§',
        category: 'mandate',
        section: 'Article 1',
        order: 1,
        effectiveFrom: '2024-01-01'
      },
      {
        id: 'term-2',
        titleEn: 'Powers and Authority',
        titleBn: '‡¶ï‡ßç‡¶∑‡¶Æ‡¶§‡¶æ ‡¶ì ‡¶ï‡¶∞‡ßç‡¶§‡ßÉ‡¶§‡ßç‡¶¨',
        descriptionEn: 'The Commission shall have the power to summon witnesses, examine documents, and conduct investigations as deemed necessary for fulfilling its mandate.',
        descriptionBn: '‡¶ï‡¶Æ‡¶ø‡¶∂‡¶®‡ßá‡¶∞ ‡¶∏‡¶æ‡¶ï‡ßç‡¶∑‡ßÄ ‡¶§‡¶≤‡¶¨ ‡¶ï‡¶∞‡¶æ, ‡¶®‡¶•‡¶ø‡¶™‡¶§‡ßç‡¶∞ ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶§‡¶æ‡¶∞ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶ü ‡¶™‡ßÇ‡¶∞‡¶£‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßÄ‡¶Ø‡¶º ‡¶¨‡¶≤‡ßá ‡¶¨‡¶ø‡¶¨‡ßá‡¶ö‡¶ø‡¶§ ‡¶§‡¶¶‡¶®‡ßç‡¶§ ‡¶™‡¶∞‡¶ø‡¶ö‡¶æ‡¶≤‡¶®‡¶æ‡¶∞ ‡¶ï‡ßç‡¶∑‡¶Æ‡¶§‡¶æ ‡¶•‡¶æ‡¶ï‡¶¨‡ßá‡•§',
        category: 'powers',
        section: 'Article 2',
        order: 2,
        effectiveFrom: '2024-01-01'
      },
      {
        id: 'term-3',
        titleEn: 'Scope of Investigation',
        titleBn: '‡¶§‡¶¶‡¶®‡ßç‡¶§‡ßá‡¶∞ ‡¶™‡¶∞‡¶ø‡¶ß‡¶ø',
        descriptionEn: 'The investigation shall cover all aspects of electoral processes including voter registration, candidate nomination, campaigning, voting procedures, and result compilation.',
        descriptionBn: '‡¶§‡¶¶‡¶®‡ßç‡¶§‡ßá ‡¶≠‡ßã‡¶ü‡¶æ‡¶∞ ‡¶®‡¶ø‡¶¨‡¶®‡ßç‡¶ß‡¶®, ‡¶™‡ßç‡¶∞‡¶æ‡¶∞‡ßç‡¶•‡ßÄ ‡¶Æ‡¶®‡ßã‡¶®‡¶Ø‡¶º‡¶®, ‡¶™‡ßç‡¶∞‡¶ö‡¶æ‡¶∞‡¶£‡¶æ, ‡¶≠‡ßã‡¶ü‡¶¶‡¶æ‡¶® ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø ‡¶è‡¶¨‡¶Ç ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶∏‡¶Ç‡¶ï‡¶≤‡¶® ‡¶∏‡¶π ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶®‡ßÄ ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶¶‡¶ø‡¶ï ‡¶Ö‡¶®‡ßç‡¶§‡¶∞‡ßç‡¶≠‡ßÅ‡¶ï‡ßç‡¶§ ‡¶•‡¶æ‡¶ï‡¶¨‡ßá‡•§',
        category: 'scope',
        section: 'Article 3',
        order: 3,
        effectiveFrom: '2024-01-01'
      },
      {
        id: 'term-4',
        titleEn: 'Reporting and Recommendations',
        titleBn: '‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü‡¶ø‡¶Ç ‡¶ì ‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂',
        descriptionEn: 'The Commission shall submit its final report with findings and recommendations to the appropriate authorities within the stipulated timeframe.',
        descriptionBn: '‡¶ï‡¶Æ‡¶ø‡¶∂‡¶® ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶ø‡¶§ ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶∏‡ßÄ‡¶Æ‡¶æ‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶â‡¶™‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßç‡¶§‡ßÉ‡¶™‡¶ï‡ßç‡¶∑‡ßá‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶§‡¶æ‡¶∞ ‡¶ö‡ßÇ‡¶°‡¶º‡¶æ‡¶®‡ßç‡¶§ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¨‡ßá‡¶¶‡¶® ‡¶ì ‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂ ‡¶ú‡¶Æ‡¶æ ‡¶¶‡ßá‡¶¨‡ßá‡•§',
        category: 'reporting',
        section: 'Article 4',
        order: 4,
        effectiveFrom: '2024-01-01',
        effectiveTo: '2025-12-31'
      }
    ];

    for (const term of sampleTerms) {
      await prisma.commissionTerm.upsert({
        where: { id: term.id },
        update: {
          titleEn: term.titleEn,
          titleBn: term.titleBn,
          descriptionEn: term.descriptionEn,
          descriptionBn: term.descriptionBn,
          category: term.category,
          section: term.section,
          order: term.order,
          effectiveFrom: new Date(term.effectiveFrom),
          effectiveTo: term.effectiveTo ? new Date(term.effectiveTo) : null,
        },
        create: {
          id: term.id,
          titleEn: term.titleEn,
          titleBn: term.titleBn,
          descriptionEn: term.descriptionEn,
          descriptionBn: term.descriptionBn,
          category: term.category,
          section: term.section,
          order: term.order,
          effectiveFrom: new Date(term.effectiveFrom),
          effectiveTo: term.effectiveTo ? new Date(term.effectiveTo) : null,
          createdBy: 'system-seed',
        },
      });
    }
    
    console.log(`‚úÖ Seeded ${sampleTerms.length} commission terms`);
  } catch (error) {
    console.error('‚ùå Error seeding commission terms:', error);
  }
}

async function seedSliderData() {
  try {
    console.log('üñºÔ∏è Seeding slider data...');
    
    const sliderDataPath = path.join(__dirname, '../data/sliderData.json');
    const sliderData = JSON.parse(fs.readFileSync(sliderDataPath, 'utf8'));
    
    const slides = sliderData.sliderData.slides;
    
    for (let i = 0; i < slides.length; i++) {
      const slide = slides[i];
      await prisma.slider.upsert({
        where: { id: `slider-${slide.id || i + 1}` },
        update: {
          titleEn: slide.title.en,
          titleBn: slide.title.bn,
          descriptionEn: slide.description.en,
          descriptionBn: slide.description.bn,
          image: slide.image,
          link: slide.link,
          buttonTextEn: slide.buttonText.en,
          buttonTextBn: slide.buttonText.bn,
          categoryEn: slide.category.en,
          categoryBn: slide.category.bn,
          date: new Date(slide.date),
          featured: slide.featured,
          order: i,
        },
        create: {
          id: `slider-${slide.id || i + 1}`,
          titleEn: slide.title.en,
          titleBn: slide.title.bn,
          descriptionEn: slide.description.en,
          descriptionBn: slide.description.bn,
          image: slide.image,
          link: slide.link,
          buttonTextEn: slide.buttonText.en,
          buttonTextBn: slide.buttonText.bn,
          categoryEn: slide.category.en,
          categoryBn: slide.category.bn,
          date: new Date(slide.date),
          featured: slide.featured,
          order: i,
          createdBy: 'system-seed',
        },
      });
    }
    
    console.log(`‚úÖ Seeded ${slides.length} sliders`);
  } catch (error) {
    console.error('‚ùå Error seeding slider data:', error);
  }
}

async function main() {
  console.log('üå± Starting comprehensive data seeding...\n');
  
  try {
    // Seed all content types
    await seedBlogData();
    await seedFAQData();
    await seedNoticeData();
    await seedContactData();
    await seedCommissionMembers();
    await seedCommissionOfficials();
    await seedCommissionTerms();
    await seedGazettes();
    await seedSliderData();
    
    console.log('\nüéâ Complete data seeding finished successfully!');
    console.log('\nüìä Database Summary:');
    
    // Get counts of all seeded data
    const [
      blogCount,
      faqCount,
      noticeCount,
      contactCount,
      memberCount,
      officialCount,
      termCount,
      gazetteCount,
      sliderCount
    ] = await Promise.all([
      prisma.blogPost.count(),
      prisma.fAQ.count(),
      prisma.notice.count(),
      prisma.contactInfo.count(),
      prisma.commissionMember.count(),
      prisma.commissionOfficial.count(),
      prisma.commissionTerm.count(),
      prisma.gazette.count(),
      prisma.slider.count()
    ]);
    
    console.log(`üìù Blog Posts: ${blogCount}`);
    console.log(`‚ùì FAQs: ${faqCount}`);
    console.log(`üì¢ Notices: ${noticeCount}`);
    console.log(`üìû Contacts: ${contactCount}`);
    console.log(`üë• Commission Members: ${memberCount}`);
    console.log(`üëî Commission Officials: ${officialCount}`);
    console.log(`üìã Commission Terms: ${termCount}`);
    console.log(`üì∞ Gazettes: ${gazetteCount}`);
    console.log(`üñºÔ∏è Sliders: ${sliderCount}`);
    console.log(`\nüìà Total Records: ${blogCount + faqCount + noticeCount + contactCount + memberCount + officialCount + termCount + gazetteCount + sliderCount}`);
    
  } catch (error) {
    console.error('\nüí• Seeding failed:', error);
  } finally {
    await prisma.$disconnect();
  }
}

main();
